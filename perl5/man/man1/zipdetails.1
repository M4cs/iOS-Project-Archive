.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "ZIPDETAILS 1"
.TH ZIPDETAILS 1 "2018-04-05" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
zipdetails \- display the internal structure of zip files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    zipdetails [\-v] zipfile.zip
\&        zipdetails \-h
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Zipdetails displays information about the internal record structure of the
zip file. It is not concerned with displaying any details of the compressed
data stored in the zip file.
.PP
The program assumes prior understanding of the internal structure of a Zip
file. You should have a copy of the Zip \s-1APPNOTE\s0 file at hand to help
understand the output from this program (\*(L"\s-1SEE ALSO\*(R"\s0 for details).
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-v" 5
.IX Item "-v"
Enable Verbose mode
.IP "\-h" 5
.IX Item "-h"
Display help
.PP
By default zipdetails will output the details of the zip file in three
columns.
.IP "Column 1" 5
.IX Item "Column 1"
This contains the offset from the start of the file in hex.
.IP "Column 2" 5
.IX Item "Column 2"
This contains a textual description of the field.
.IP "Column 3" 5
.IX Item "Column 3"
If the field contains a numeric value it will be displayed in hex. Zip
stored most numbers in little-endian format \- the value displayed will have
the little-endian encoding removed.
.Sp
Next, is an optional description of what the value means.
.PP
If the \f(CW\*(C`\-v\*(C'\fR option is present, column 1 is expanded to include
.IP "\(bu" 5
The offset from the start of the file in hex.
.IP "\(bu" 5
The length of the filed in hex.
.IP "\(bu" 5
A hex dump of the bytes in field in the order they are stored in the zip
file.
.SH "TODO"
.IX Header "TODO"
Error handling is still a work in progress.  If the program encounters a
problem reading a zip file it is likely to terminate with an unhelpful
error message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The primary reference for Zip files is the \*(L"appnote\*(R" document available at
<http://www.pkware.com/documents/casestudies/APPNOTE.TXT>.
.PP
An alternative reference is the Info-Zip appnote. This is available from
<ftp://ftp.info\-zip.org/pub/infozip/doc/>
.PP
The \f(CW\*(C`zipinfo\*(C'\fR program that comes with the info-zip distribution
(<http://www.info\-zip.org/>) can also display details of the structure of
a zip file.
.PP
See also Archive::Zip::SimpleZip, IO::Compress::Zip,
IO::Uncompress::Unzip.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Marquess \fIpmqs@cpan.org\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2018 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
